{"version":3,"sources":["pages/Search/Search.module.css","pages/Search/searchAPI.js","pages/Search/searchSlice.js","pages/Search/Search.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","OMDB_BASE_URL","fetchSuggestions","search_text","Promise","resolve","url","fetch","then","response","json","data","results","Search","getSuggestions","createAsyncThunk","a","searchSlice","createSlice","name","initialState","suggestions","status","reducers","extraReducers","pending","state","fulfilled","action","payload","selectSuggestions","search","dispatch","useDispatch","useSelector","console","log","className","styles","inputWrapper","input","placeholder","onKeyUp","e","key","currentTarget","toLowerCase","value","map","suggestion","result","src","Poster","Title","App","to","exact","path","store","configureStore","reducer","searchReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,aAAe,6BAA6B,MAAQ,sBAAsB,QAAU,wBAAwB,OAAS,yB,gMCCjIC,EAAa,yCAFE,SAEF,YADE,gCAGd,SAASC,IAAqC,IAAnBC,EAAkB,uDAAJ,GAC9C,OAAO,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAG,UAAML,EAAN,cAAyBE,GAClCI,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACG,GACjD,IAAMC,EAAUD,EAAKE,QAAU,GAC/BR,EAAQO,SCNd,IAMaE,EAAiBC,YAAiB,0BAAD,uCAA4B,WAAOZ,GAAP,eAAAa,EAAA,sEAC/Cd,EAAiBC,GAD8B,cAChEM,EADgE,yBAE/DA,GAF+D,2CAA5B,uDAMjCQ,EAAcC,YAAY,CACrCC,KAAM,SACNC,aAdmB,CACnBC,YAAa,GACbC,OAAQ,QAaRC,SAAU,GACVC,eAAa,mBACVV,EAAeW,SAAU,SAACC,GACzBA,EAAMJ,OAAS,aAFN,cAIVR,EAAea,WAAY,SAACD,EAAOE,GAClCF,EAAMJ,OAAS,OACfI,EAAML,YAAcO,EAAOC,SAAW,MAN7B,KAYFC,EAAoB,SAACJ,GAAD,OAAWA,EAAMK,OAAOV,aAE1CJ,IAAf,Q,wBCvBO,SAASJ,IACd,IAAMmB,EAAWC,cACXZ,EAAca,YAAYJ,GAIhC,OAFAK,QAAQC,IAAIf,GAGV,gCACE,qBAAKgB,UAAWC,IAAOC,aAAvB,SACE,uBACEF,UAAWC,IAAOE,MAClBC,YAAY,oBACZC,QAAS,SAACC,GACR,IAAQC,EAAuBD,EAAvBC,IAAKC,EAAkBF,EAAlBE,cACb,GAA0B,UAAtBD,EAAIE,cAAR,CACA,IAAM3C,EAAc0C,EAAcE,MAClCf,EAASlB,EAAeX,UAK9B,qBAAKkC,UAAWC,IAAO1B,QAAvB,SACGS,EAAY2B,KAAI,SAACC,GAChB,OACE,sBAAKZ,UAAWC,IAAOY,OAAvB,UACE,qBAAKC,IAAG,UAAKF,EAAWG,UACxB,+BAAOH,EAAWI,mB,MCAjBC,MAzBR,WACL,OACE,cAAC,IAAD,UACE,sBAAKjB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAC,IAAD,CAAMA,UAAU,cAAckB,GAAG,IAAjC,wBACA,cAAC,IAAD,CAAMlB,UAAU,cAAckB,GAAG,WAAjC,qBACA,cAAC,IAAD,CAAMlB,UAAU,cAAckB,GAAG,UAAjC,uBAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,+CAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACE,4CAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC5C,EAAD,eCxBC6C,EAAQC,YAAe,CAClCC,QAAS,CACP7B,OAAQ8B,KCMQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAACmE,GAClCA,EAAaC,kB","file":"static/js/main.b9b0387e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"Search_inputWrapper__2d69I\",\"input\":\"Search_input__3vVHr\",\"results\":\"Search_results__vCLNc\",\"result\":\"Search_result__22ctu\"};","const OMDB_API_KEY = 46835371;\r\nconst OMDB_API_PARAMS = `type=movie&plot=short&r=json`;\r\nconst OMDB_BASE_URL = `http://www.omdbapi.com/?apikey=${OMDB_API_KEY}&${OMDB_API_PARAMS}`;\r\n\r\nexport function fetchSuggestions (search_text = '') {\r\n  return new Promise((resolve) => {\r\n    const url = `${OMDB_BASE_URL}&s=${search_text}`;\r\n    fetch(url).then(response => response.json()).then((data) => {\r\n      const results = data.Search || [];\r\n      resolve(results);\r\n    });\r\n  });\r\n}\r\n\r\nexport function fetchMovie (search_text = '') {\r\n  return new Promise((resolve) => {\r\n    const url = `${OMDB_BASE_URL}&t=${search_text}`;\r\n    fetch(url).then(response => response.json()).then((data) => {\r\n      resolve(data);\r\n    });\r\n  });\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchSuggestions } from './searchAPI';\r\n\r\nconst initialState = {\r\n  suggestions: [],\r\n  status: 'idle',\r\n};\r\n\r\n// THUNKS\r\nexport const getSuggestions = createAsyncThunk('search/fetchSuggestions', async (search_text) => {\r\n    const response = await fetchSuggestions(search_text);\r\n    return response;\r\n});\r\n\r\n// SLICE\r\nexport const searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getSuggestions.pending]: (state) => {\r\n      state.status = 'loading';\r\n    },\r\n    [getSuggestions.fulfilled]: (state, action) => {\r\n      state.status = 'idle';\r\n      state.suggestions = action.payload || [];\r\n    }\r\n  },\r\n});\r\n\r\n// SELECTORS\r\nexport const selectSuggestions = (state) => state.search.suggestions;\r\n\r\nexport default searchSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  getSuggestions,\r\n  selectSuggestions,\r\n} from './searchSlice';\r\n\r\nimport styles from './Search.module.css';\r\n\r\nexport function Search() {\r\n  const dispatch = useDispatch();\r\n  const suggestions = useSelector(selectSuggestions);\r\n\r\n  console.log(suggestions);\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.inputWrapper}>\r\n        <input\r\n          className={styles.input}\r\n          placeholder=\"Search for movies\"\r\n          onKeyUp={(e) => {\r\n            const { key, currentTarget } = e;\r\n            if (key.toLowerCase() !== 'enter') return;\r\n            const search_text = currentTarget.value;\r\n            dispatch(getSuggestions(search_text));\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div className={styles.results}>\r\n        {suggestions.map((suggestion) => {\r\n          return (\r\n            <div className={styles.result}>\r\n              <img src={`${suggestion.Poster}`} />\r\n              <span>{suggestion.Title}</span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\n// import { useSelector } from 'react-redux';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\n\n// import { WatchList } from './pages/WatchList/WatchList';\n// import { WatchedList } from './pages/WatchedList/WatchedList';\nimport { Search } from './pages/Search/Search';\n\n\nimport './App.css';\n\nexport function App () {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <div className=\"header\">\n          <Link className=\"header-link\" to=\"/\">Watch List</Link>\n          <Link className=\"header-link\" to=\"/watched\">Watched</Link>\n          <Link className=\"header-link\" to=\"/search\">Search</Link>\n        </div>\n        <Switch>\n          <Route exact path=\"/\">\n            <div>WATCH LIST</div>\n          </Route>\n          <Route exact path=\"/watched\">\n            <div>WATCHED</div>\n          </Route>\n          <Route path=\"/search\">\n            <Search />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport searchReducer from '../pages/Search/searchSlice';\n\nexport const store = configureStore({\n  reducer: {\n    search: searchReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}